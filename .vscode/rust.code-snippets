{
	// Place your sample-rust ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"atcoder main": {
		"scope": "rust",
		"prefix": "atcoder main",
		"body": [
			"fn main() {",
			"\tlet solver = Solver::new(read_line());",
			"\tlet stdout = solver.solve();",
			"\tstdout.iter().for_each(|s| {",
			"\t\tprintln!(\"{}\", s);",
			"\t})",
			"}",
			"",
			"struct Solver {",
			"\ts: String,",
			"}",
			"",
			"impl Solver {",
			"\tfn new(s: String) -> Solver {",
			"\t\tSolver { s: s }",
			"\t}",
			"",
			"\tfn solve(&self) -> Vec<String> {",
			"\t\tlet mut buf = Vec::new();",
			"\t\tbuf.push(format!(\"{}\", self.s));",
			"\t\tbuf",
			"\t}",
			"}",
		],
		"description": "Base code for atcoder"
	},
	"atcoder test": {
		"scope": "rust",
		"prefix": "atcoder test",
		"body": [
			"#[test]",
			"fn test_solve_1() {",
			"\tlet solver = Solver::new(\"1\".to_owned());",
			"\tassert_eq!(solver.solve(), vec!(\"1\"));",
			"}",
		],
		"description": "テストコード"
	},
	"Input stdin as single value": {
		"scope": "rust",
		"prefix": "input stdin as single values",
		"body": [
			"let ${1:v} = read_line().parse().unwrap();",
		],
		"description": "標準入力から値取得"
	},
	"Input stdin as multi values": {
		"scope": "rust",
		"prefix": "input stdin as multi values",
		"body": [
			"let stdin  = read_line();",
			"let mut iter  = stdin.split_whitespace();",
			"let ${1:v1} = iter.next().unwrap().parse().unwrap();",
			"let ${2:v2} = iter.next().unwrap().parse().unwrap();",
		],
		"description": "標準入力から値取得（複数値）"
	},
	"Input stdin as vector": {
		"scope": "rust",
		"prefix": "input stdin as vector",
		"body": [
			"let ${1:v} = read_line().split_whitespace().map(|v| v.parse().unwrap()).collect();",
		],
		"description": "標準入力から値取得（Vec型）"
	}
}