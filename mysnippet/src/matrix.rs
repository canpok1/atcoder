use cargo_snippet::snippet;

#[snippet(name = "matrix3")]
// 3x3行列
type Matrix3 = Vec<Vec<i64>>;

#[snippet(name = "matrix3")]
#[allow(dead_code)]
// 3x3単位行列
fn unit_matrix3() -> Matrix3 {
    vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]]
}

#[snippet(name = "matrix3")]
#[allow(dead_code)]
// 3x3行列の積
fn matmul(m1: &Matrix3, m2: &Matrix3) -> Matrix3 {
    vec![
        vec![
            m1[0][0] * m2[0][0] + m1[0][1] * m2[1][0] + m1[0][2] * m2[2][0],
            m1[0][0] * m2[0][1] + m1[0][1] * m2[1][1] + m1[0][2] * m2[2][1],
            m1[0][0] * m2[0][2] + m1[0][1] * m2[1][2] + m1[0][2] * m2[2][2],
        ],
        vec![
            m1[1][0] * m2[0][0] + m1[1][1] * m2[1][0] + m1[1][2] * m2[2][0],
            m1[1][0] * m2[0][1] + m1[1][1] * m2[1][1] + m1[1][2] * m2[2][1],
            m1[1][0] * m2[0][2] + m1[1][1] * m2[1][2] + m1[1][2] * m2[2][2],
        ],
        vec![
            m1[2][0] * m2[0][0] + m1[2][1] * m2[1][0] + m1[2][2] * m2[2][0],
            m1[2][0] * m2[0][1] + m1[2][1] * m2[1][1] + m1[2][2] * m2[2][1],
            m1[2][0] * m2[0][2] + m1[2][1] * m2[1][2] + m1[2][2] * m2[2][2],
        ],
    ]
}

#[test]
fn test_matmul() {
    let m1 = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];
    let m2 = vec![vec![9, 8, 7], vec![6, 5, 4], vec![3, 2, 1]];
    assert_eq!(
        matmul(&m1, &m2),
        vec![
            vec![
                1 * 9 + 2 * 6 + 3 * 3,
                1 * 8 + 2 * 5 + 3 * 2,
                1 * 7 + 2 * 4 + 3 * 1
            ],
            vec![
                4 * 9 + 5 * 6 + 6 * 3,
                4 * 8 + 5 * 5 + 6 * 2,
                4 * 7 + 5 * 4 + 6 * 1
            ],
            vec![
                7 * 9 + 8 * 6 + 9 * 3,
                7 * 8 + 8 * 5 + 9 * 2,
                7 * 7 + 8 * 4 + 9 * 1
            ],
        ]
    );
}
